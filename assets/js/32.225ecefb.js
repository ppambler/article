(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{585:function(t,s,a){"use strict";a.r(s);var e=a(12),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("原文："),a("a",{attrs:{href:"https://juejin.cn/post/6844903591845724167",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 深入系列３：Props 和 State"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("React 深入系列，深入讲解了 React 中的重点概念、特性和模式等，旨在帮助大家加深对 React 的理解，以及在项目中更加灵活地使用 React。")])]),t._v(" "),a("p",[t._v("React 的核心思想是组件化的思想，而 React 组件的定义可以通过下面的公式描述：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UI")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("组件根据 "),a("code",[t._v("props")]),t._v(" 和 "),a("code",[t._v("state")]),t._v(" 两个参数，计算得到对应界面的 UI。可见，"),a("code",[t._v("props")]),t._v(" 和 "),a("code",[t._v("state")]),t._v(" 是组件的两个重要数据源。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ppambler/blog-images/raw/master/images/1487237596props-and-state.png",alt:"New values for props and states can change the UI"}})]),t._v(" "),a("p",[a("strong",[t._v("本篇文章不是对 props 和 state 基本用法的介绍，而是尝试从更深层次解释 props 和 state，并且归纳使用它们时的注意事项。")])]),t._v(" "),a("h2",{attrs:{id:"props-和-state-本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props-和-state-本质"}},[t._v("#")]),t._v(" Props 和 State 本质")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ppambler/blog-images/raw/master/images/image-20210311145710782.png",alt:"image-20210311145710782"}})]),t._v(" "),a("p",[a("strong",[t._v("一句话概括，props 是组件对外的接口，state 是组件对内的接口")]),t._v("。组件内可以引用其他组件，组件之间的引用形成了一个树状结构（组件树），如果下层组件需要使用上层组件的数据或方法，上层组件就可以通过下层组件的 props 属性进行传递，因此 props 是组件对外的接口。组件除了使用上层组件传递的数据外，自身也可能需要维护管理数据，这就是组件对内的接口 state。根据对外接口 props 和对内接口 state，组件计算出对应界面的 UI。")]),t._v(" "),a("p",[t._v("组件的 props 和 state 都和组件最终渲染出的 UI 直接相关。两者的主要区别是：state 是可变的，是组件内部维护的一组用于反映组件 UI 变化的状态集合；而 props 是组件的只读属性，组件内部不能直接修改 props，要想修改 props，只能在该组件的上层组件中修改。在组件"),a("strong",[t._v("状态上移")]),t._v("的场景中，父组件正是通过子组件的 props，传递给子组件其所需要的状态。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ppambler/blog-images/raw/master/images/react-state-vs-props.jpg",alt:"Cover image for Master the art of React state and props in 5 minutes"}})]),t._v(" "),a("blockquote",[a("p",[t._v("个人理解的状态上移：A 组件不用 "),a("code",[t._v("title")]),t._v(" 这个 "),a("code",[t._v("state")]),t._v("，而是用来自 "),a("code",[t._v("props")]),t._v(" 的 "),a("code",[t._v("title")])])]),t._v(" "),a("h2",{attrs:{id:"如何定义-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何定义-state"}},[t._v("#")]),t._v(" 如何定义 State")]),t._v(" "),a("p",[t._v("定义一个合适的 state，是正确创建组件的第一步。state 必须能代表一个组件 UI 呈现的"),a("strong",[t._v("完整状态集")]),t._v("，即组件对应 UI 的任何改变，都可以从 state 的变化中反映出来；同时，state 还必须是代表一个组件 UI 呈现的"),a("strong",[t._v("最小状态集")]),t._v("，即 state 中的所有状态都是用于反映组件 UI 的变化，没有任何多余的状态，也不需要通过其他状态计算而来的中间状态。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/ppambler/blog-images/raw/master/images/image-20210311151905136.png",alt:"image-20210311151905136"}})]),t._v(" "),a("p",[t._v("组件中用到的一个变量是不是应该作为组件 "),a("code",[t._v("state")]),t._v("，可以通过下面的 4 条依据进行判断：")]),t._v(" "),a("ol",[a("li",[t._v("这个变量是否是通过 props 从父组件中获取？如果是，那么它不是一个状态。")]),t._v(" "),a("li",[t._v("这个变量是否在组件的整个生命周期中都保持不变？如果是，那么它不是一个状态。")]),t._v(" "),a("li",[t._v("这个变量是否可以通过 state 或 props 中的已有数据计算得到？如果是，那么它不是一个状态。")]),t._v(" "),a("li",[t._v("这个变量是否在组件的 render 方法中使用？如果"),a("strong",[t._v("不是")]),t._v("，那么它不是一个状态。这种情况下，这个变量更适合定义为组件的一个"),a("strong",[t._v("普通属性")]),t._v("（除了 props 和 state 以外的组件属性 ），例如组件中用到的定时器，就应该直接定义为 "),a("code",[t._v("this.timer")]),t._v("，而不是 "),a("code",[t._v("this.state.timer")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("请务必牢记，并不是组件中用到的所有变量都是组件的状态！当存在多个组件共同依赖同一个状态时，一般的做法是状态上移")]),t._v("，将这个状态放到这几个组件的公共父组件中。")]),t._v(" "),a("h2",{attrs:{id:"如何正确修改-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何正确修改-state"}},[t._v("#")]),t._v(" 如何正确修改 State")]),t._v(" "),a("h3",{attrs:{id:"_1-不能直接修改-state。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-不能直接修改-state。"}},[t._v("#")]),t._v(" 1. 不能直接修改 State。")]),t._v(" "),a("p",[t._v("直接修改 state，组件并不会重新重发 render。例如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'React'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("正确的修改方式是使用"),a("code",[t._v("setState()")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'React'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"_2-state-的更新是异步的。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-state-的更新是异步的。"}},[t._v("#")]),t._v(" 2. State 的更新是异步的。")]),t._v(" "),a("p",[t._v("调用"),a("code",[t._v("setState")]),t._v("，组件的 state 并不会立即改变，"),a("code",[t._v("setState")]),t._v("只是把要修改的状态放入一个队列中，React 会优化真正的执行时机，并且 React 会出于性能原因，可能会将多次"),a("code",[t._v("setState")]),t._v("的状态修改合并成一次状态修改。所以不能依赖当前的 state，计算下个 state。当真正执行状态修改时，依赖的 this.state 并不能保证是最新的 state，因为 React 会把多次 state 的修改合并成一次，这时，this.state 还是等于这几次修改发生前的 state。另外需要注意的是，同样不能依赖当前的 props 计算下个 state，因为 props 的更新也是异步的。")]),t._v(" "),a("p",[t._v("举个例子，对于一个电商类应用，在我们的购物车中，当点击一次购买按钮，购买的数量就会加 1，如果我们连续点击了两次按钮，就会连续调用两次"),a("code",[t._v("this.setState({quantity: this.state.quantity + 1})")]),t._v("，在 React 合并多次修改为一次的情况下，相当于等价执行了如下代码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  previousState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("quantity"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quantity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("quantity"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quantity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("于是乎，后面的操作覆盖掉了前面的操作，最终购买的数量只增加了 1 个。")]),t._v(" "),a("p",[t._v("如果你真的有这样的需求，可以使用另一个接收一个函数作为参数的"),a("code",[t._v("setState")]),t._v("，这个函数有两个参数，第一个参数是组件的前一个 state（本次组件状态修改成功前的 state），第二个参数是组件当前最新的 props。如下所示：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("preState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  counter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" preState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quantity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("blockquote",[a("p",[t._v("我连续 click 一个 button -> 为啥会多次执行 "),a("code",[t._v("setState")]),t._v(" 呢？ -> 我 click 一次，就执行一次 "),a("code",[t._v("add")]),t._v(" 方法，click 两次就搞两次 "),a("code",[t._v("add")]),t._v(" 咯 -> 难道 "),a("code",[t._v("this.setState")]),t._v(" 这个异步操作比两次事件入栈还要慢吗？ -> 如果你连续执行 setState ，那么下一次的 preState 就是最新的 state 了，第二个参数并不常用啊！")])]),t._v(" "),a("h3",{attrs:{id:"_3-state-的更新是一个浅合并-shallow-merge-的过程。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-state-的更新是一个浅合并-shallow-merge-的过程。"}},[t._v("#")]),t._v(" 3. State 的更新是一个浅合并（Shallow Merge）的过程。")]),t._v(" "),a("p",[t._v("当调用"),a("code",[t._v("setState")]),t._v("修改组件状态时，只需要传入发生改变的状态变量，而不是组件完整的 state，因为组件 state 的更新是一个浅合并（Shallow Merge）的过程。例如，一个组件的 state 为：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'React'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  content "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'React is an wonderful JS library!'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("当只需要修改状态"),a("code",[t._v("title")]),t._v("时，只需要将修改后的"),a("code",[t._v("title")]),t._v("传给"),a("code",[t._v("setState")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Reactjs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("React 会合并新的"),a("code",[t._v("title")]),t._v("到原来的组件 state 中，同时保留原有的状态"),a("code",[t._v("content")]),t._v("，合并后的 state 为：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Reactjs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  content "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'React is an wonderful JS library!'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"state-与-immutable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-与-immutable"}},[t._v("#")]),t._v(" State 与 Immutable")]),t._v(" "),a("p",[t._v("React 官方建议把 state 当作不可变对象，一方面是如果直接修改 "),a("code",[t._v("this.state")]),t._v("，组件并不会重新 render；另一方面 state 中包含的所有状态都应该是不可变对象。当 state 中的某个状态发生变化，我们应该重新创建一个新状态，而不是直接修改原来的状态。那么，当状态发生变化时，如何创建新的状态呢？根据状态的类型，可以分成三种情况：")]),t._v(" "),a("h3",{attrs:{id:"_1-状态的类型是不可变类型-数字-字符串-布尔值-null-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-状态的类型是不可变类型-数字-字符串-布尔值-null-undefined"}},[t._v("#")]),t._v(" 1. 状态的类型是不可变类型（数字，字符串，布尔值，null， undefined）")]),t._v(" "),a("p",[t._v("这种情况最简单，因为状态是不可变类型，直接给要修改的状态赋一个新值即可。如要修改 count（数字类型）、title（字符串类型）、success（布尔类型）三个状态：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Redux'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  success"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"_2-状态的类型是数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-状态的类型是数组"}},[t._v("#")]),t._v(" 2. 状态的类型是数组")]),t._v(" "),a("p",[t._v("如有一个数组类型的状态 books，当向 books 中增加一本书时，使用数组的 concat 方法或 ES6 的数组扩展语法（spread syntax）：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法一：使用 preState、concat 创建新数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("preState")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  books"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" preState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("books"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'React Guide'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法二：ES6 spread syntax")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("preState")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  books"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("preState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("books"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'React Guide'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("当从 books 中截取部分元素作为新状态时，使用数组的 slice 方法：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 preState、slice 创建新数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("preState")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  books"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" preState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("books"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("当从 books 中过滤部分元素后，作为新状态时，使用数组的 filter 方法：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 preState、filter 创建新数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("preState")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  books"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" preState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("books"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'React'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("注意不要使用 push、pop、shift、unshift、splice 等方法修改数组类型的状态，因为这些方法都是在原数组的基础上修改，而 concat、slice、filter 会返回一个新的数组。")]),t._v(" "),a("h3",{attrs:{id:"_3-状态的类型是简单对象-plain-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-状态的类型是简单对象-plain-object"}},[t._v("#")]),t._v(" 3. 状态的类型是简单对象 (Plain Object)")]),t._v(" "),a("p",[t._v("如 state 中有一个状态 owner，结构如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  owner"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'老干部'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("当修改 state 时，有如下两种方式：")]),t._v(" "),a("p",[a("strong",[t._v("1） 使用 ES6 的 Object.assgin 方法")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("preState")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  owner"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("owner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jason'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("strong",[t._v("2） 使用对象扩展语法（"),a("a",{attrs:{href:"https://github.com/sebmarkbage/ecmascript-rest-spread",target:"_blank",rel:"noopener noreferrer"}},[t._v("object spread properties"),a("OutboundLink")],1),t._v("）")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("preState")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  owner"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("preState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("owner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jason'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("总结一下，创建新的状态的关键是，避免使用会直接修改原对象的方法，而是使用可以返回一个新对象的方法。当然，也可以使用一些 Immutable 的 JS 库，如 "),a("a",{attrs:{href:"https://github.com/facebook/immutable-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Immutable.js"),a("OutboundLink")],1),t._v("，实现类似的效果。")]),t._v(" "),a("p",[t._v("那么，为什么 React 推荐组件的状态是不可变对象呢？")]),t._v(" "),a("p",[t._v("一方面是因为不可变对象方便管理和调试，了解更多可 "),a("a",{attrs:{href:"http://redux.js.org/docs/faq/ImmutableData.html#benefits-of-immutability",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考这里"),a("OutboundLink")],1),t._v("；另一方面是出于性能考虑，当组件状态都是不可变对象时，我们在组件的"),a("code",[t._v("shouldComponentUpdate")]),t._v("方法中，仅需要比较状态的引用就可以判断状态是否真的改变，从而避免不必要的"),a("code",[t._v("render")]),t._v("方法的调用。当我们使用 React 提供的"),a("code",[t._v("PureComponent")]),t._v("时，更是要保证组件状态是不可变对象，否则在组件的"),a("code",[t._v("shouldComponentUpdate")]),t._v("方法中，状态比较就可能出现错误。")]),t._v(" "),a("h2",{attrs:{id:"了解更多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解更多"}},[t._v("#")]),t._v(" 了解更多")]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://blog.csdn.net/qq_40462579/article/details/114032810",target:"_blank",rel:"noopener noreferrer"}},[t._v("React入门 Part6_秋名山山妖的博客-CSDN博客"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"q-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[t._v("#")]),t._v(" Q&A")]),t._v(" "),a("h3",{attrs:{id:"_1-浅合并是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-浅合并是什么"}},[t._v("#")]),t._v(" 1）浅合并是什么？")]),t._v(" "),a("p",[t._v("合并的意思：")]),t._v(" "),a("ol",[a("li",[t._v("v：把几个事物合成一个事物 -> 精简机构，合并科室")]),t._v(" "),a("li",[t._v("v：由一种疾病引发另一种疾病；（多种病）同时发作。 -> 合并症")])]),t._v(" "),a("p",[t._v("简单来说，把 5 班的同学合并到 3 班去，这样 5 班就不存在了！")]),t._v(" "),a("p",[t._v("对于两个对象而言，所谓浅合并就是把第一层的键和值进行合并和替换：")]),t._v(" "),a("ol",[a("li",[t._v("合并指的是 -> obj2 有 obj1 没有的属性，那就给 obj1")]),t._v(" "),a("li",[t._v("替换指的是 -> obj2、obj1 都有的属性，那 obj2 的属性值就会替换掉 obj1 的")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("p",[t._v("如果 obj1 不是对象，如 5、'6'这样，那么这些基本类型值会被包装成对象，再进行合并，如 "),a("code",[t._v("'6'")]),t._v(" 会包装成字符串对象，即它的构造器是 "),a("code",[t._v("String")])])]),t._v(" "),a("p",[t._v("同理，深合并就是，第二层、第三层等也会进行合并和替换")]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://blog.csdn.net/lixiaosenlin/article/details/109785219",target:"_blank",rel:"noopener noreferrer"}},[t._v("web 前端高级 JavaScript - 对象的深合并与浅合并_lixiaosenlin 的专栏-CSDN 博客"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_2-什么叫不可变对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么叫不可变对象"}},[t._v("#")]),t._v(" 2）什么叫不可变对象？")]),t._v(" "),a("p",[t._v("不可变的原理很简单，就是"),a("strong",[t._v("不修改原有对象")]),t._v("，而是通过产生新的来代替原来的，作用也非常单一，就是零副作用。听起来有点别扭，举个例子，你在一个循环里面遍历一个数组，遍历过程中还修改了原数组的数据，这就会带来一些副作用，比如死循环之类的。")]),t._v(" "),a("p",[t._v("immer 和 immutable.js 都只是基于此做了一些封装，让“不可变”写起来更爽而已。")]),t._v(" "),a("blockquote",[a("p",[t._v("简单来说，不要修改对象里边的属性")])]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://segmentfault.com/q/1010000022867342",target:"_blank",rel:"noopener noreferrer"}},[t._v("immer.js 不可变对象的用途是什么呢？什么情况需要使用呢？ - SegmentFault 思否"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://www.jianshu.com/p/327de4c87991",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 浅析 -- 可变对象和不可变对象 - 简书"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://github.com/sunyongjian/blog/issues/33",target:"_blank",rel:"noopener noreferrer"}},[t._v("不可变数据结构（immutable data） · Issue #33 · sunyongjian/blog"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://juejin.cn/post/6844903470718255118",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 JS 对象开始，谈一谈前端“不可变数据”和函数式编程"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_3-对象里边出现等号是什么神仙语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象里边出现等号是什么神仙语法"}},[t._v("#")]),t._v(" 3）对象里边出现等号是什么神仙语法？")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  owner "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'老干部'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {name:'老干部',age:30}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("最外层的这个"),a("code",[t._v("{}")]),t._v("是块级作用域哈！")]),t._v(" "),a("p",[t._v("文章里边是这样的：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  owner "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'老干部'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("显然是"),a("code",[t._v("owner:{}")])]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object initializer - JavaScript - MDN"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_4-purecomponent是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-purecomponent是什么"}},[t._v("#")]),t._v(" 4）"),a("code",[t._v("PureComponent")]),t._v("是什么？")]),t._v(" "),a("p",[t._v("React15.3 中新加了一个 "),a("code",[t._v("PureComponent")]),t._v(" 类，顾名思义， "),a("code",[t._v("pure")]),t._v(" 是纯的意思，"),a("code",[t._v("PureComponent")]),t._v(" 也就是纯组件，取代其前身 "),a("code",[t._v("PureRenderMixin")]),t._v(" ,"),a("code",[t._v("PureComponent")]),t._v(" 是优化 "),a("code",[t._v("React")]),t._v(" 应用程序最重要的方法之一，易于实施，只要把继承类从 "),a("code",[t._v("Component")]),t._v(" 换成 "),a("code",[t._v("PureComponent")]),t._v(" 即可，可以减少不必要的 "),a("code",[t._v("render")]),t._v(" 操作的次数，从而提高性能，而且可以少写 "),a("code",[t._v("shouldComponentUpdate")]),t._v(" 函数，节省了点代码。")]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://juejin.cn/post/6844903480369512455",target:"_blank",rel:"noopener noreferrer"}},[t._v("React PureComponent 使用指南"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://juejin.cn/post/6844903912663678990",target:"_blank",rel:"noopener noreferrer"}},[t._v("可靠 React 组件设计的 7 个准则之纯组件"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("➹："),a("a",{attrs:{href:"https://juejin.cn/post/6844904099679305741",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 组件 纯组件 函数组件 高阶组件"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);